rules_version = '2';
       service cloud.firestore {
         match /databases/{database}/documents {
           match /{document=**} {
             allow read, write: if request.auth != null;
           }
         }
    

    // Helper function to check if the user is authenticated
    function isAuth() {
      return request.auth != null;
    }

    // Helper function to check if the user is an admin
    function isAdmin() {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN';
    }

    // Helper function to check if the user is a store owner
    function isStoreOwner() {
      return isAuth() && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'STORE_OWNER' ||
         isAdmin());
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuth();
      allow create: if isAuth() && request.auth.uid == userId;
      allow update: if isAuth() && (request.auth.uid == userId || isAdmin());
      allow delete: if isAuth() && isAdmin();
    }

    // Stores collection
    match /stores/{storeId} {
      allow read: if true;
      allow create: if isAuth() && (isStoreOwner() || isAdmin());
      allow update, delete: if isAuth() && (resource.data.ownerId == request.auth.uid || isAdmin());

      // Nested items collection
      match /items/{itemId} {
        allow read: if true;
        allow create, update, delete: if isAuth() && get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId == request.auth.uid;
      }
    }
  
    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isAuth();
      allow update, delete: if isAuth() && resource.data.userId == request.auth.uid;
    }
  
  
  }
  
  
